import React, { useState, useEffect, useRef } from 'react';
import { 
  Menu, X, Home, User, Code, Briefcase, GraduationCap, 
  FolderOpen, Mail, Download, Search, Zap, 
  Globe, Star, Sparkles, ArrowRight, Eye, Coffee,
  Terminal, Layers, Hexagon, Triangle
} from 'lucide-react';

const navItems = [
  { label: 'Home', href: '#home', icon: Home, accent: '#00f5ff' },
  { label: 'About', href: '#about', icon: User, accent: '#ff0080' },
  { label: 'Skills', href: '#skills', icon: Code, accent: '#00ff88' },
  { label: 'Experience', href: '#experience', icon: Briefcase, accent: '#ff8000' },
  { label: 'Education', href: '#education', icon: GraduationCap, accent: '#8000ff' },
  { label: 'Projects', href: '#projects', icon: FolderOpen, accent: '#ff4000' },
  { label: 'Contact', href: '#contact', icon: Mail, accent: '#ffff00' },
];

const FloatingElements = () => (
  <div className="absolute inset-0 overflow-hidden pointer-events-none">
    {[...Array(8)].map((_, i) => (
      <div
        key={i}
        className="absolute opacity-10"
        style={{
          left: `${Math.random() * 100}%`,
          top: `${Math.random() * 100}%`,
          animationDelay: `${i * 0.5}s`,
        }}
      >
        <div 
          className="w-4 h-4 border border-cyan-400 rotate-45 animate-pulse"
          style={{
            animation: `float ${3 + i}s ease-in-out infinite`,
            filter: 'blur(0.5px)',
          }}
        />
      </div>
    ))}
  </div>
);

const HologramEffect = ({ children, isActive }) => (
  <div className="relative group">
    {children}
    {isActive && (
      <>
        <div className="absolute inset-0 bg-cyan-400/20 blur-md animate-pulse" />
        <div className="absolute inset-0 border border-cyan-400/50 animate-pulse" 
             style={{ clipPath: 'polygon(0 0, 100% 0, 95% 100%, 5% 100%)' }} />
        <div className="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-transparent via-cyan-400 to-transparent animate-pulse" />
      </>
    )}
  </div>
);

const GlitchText = ({ children, isActive }) => (
  <div className="relative">
    <span className={`relative z-10 ${isActive ? 'text-cyan-400' : 'text-white'}`}>
      {children}
    </span>
    {isActive && (
      <>
        <span className="absolute top-0 left-0 text-red-500 opacity-70 animate-pulse" 
              style={{ transform: 'translate(-1px, -1px)' }}>
          {children}
        </span>
        <span className="absolute top-0 left-0 text-blue-500 opacity-70 animate-pulse" 
              style={{ transform: 'translate(1px, 1px)' }}>
          {children}
        </span>
      </>
    )}
  </div>
);

const NeonButton = ({ children, onClick, variant = 'primary' }) => {
  const colors = {
    primary: 'from-cyan-500 to-blue-500',
    secondary: 'from-purple-500 to-pink-500',
    accent: 'from-green-500 to-emerald-500'
  };

  return (
    <button
      onClick={onClick}
      className="relative group overflow-hidden"
    >
      <div className={`absolute inset-0 bg-gradient-to-r ${colors[variant]} opacity-20 blur-xl group-hover:opacity-40 transition-opacity duration-300`} />
      <div className={`relative px-6 py-3 bg-gradient-to-r ${colors[variant]} text-white font-medium transition-all duration-300 group-hover:scale-105`}
           style={{ clipPath: 'polygon(10px 0, 100% 0, calc(100% - 10px) 100%, 0 100%)' }}>
        <div className="absolute inset-0 bg-black/20" />
        <div className="relative z-10 flex items-center gap-2">
          {children}
        </div>
        <div className="absolute top-0 left-0 w-full h-0.5 bg-white/50 group-hover:animate-ping" />
        <div className="absolute bottom-0 right-0 w-full h-0.5 bg-white/50 group-hover:animate-ping" />
      </div>
    </button>
  );
};

export default function CyberNavbar() {
  const [isOpen, setIsOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('home');
  const [scrolled, setScrolled] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [batteryLevel] = useState(Math.floor(Math.random() * 30) + 70);
  const navRef = useRef(null);

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (scrollTop / docHeight) * 100;
      
      setScrolled(scrollTop > 20);
      setScrollProgress(progress);

      const sections = navItems.map(item => item.href.slice(1));
      const currentSection = sections.find(section => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          return rect.top <= 150 && rect.bottom >= 150;
        }
        return false;
      });

      if (currentSection) {
        setActiveSection(currentSection);
      }
    };

    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('scroll', handleScroll);
    window.addEventListener('mousemove', handleMouseMove);
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  const scrollToSection = (href) => {
    const element = document.getElementById(href.slice(1));
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
    setIsOpen(false);
    setIsSearchOpen(false);
  };

  const SearchModal = () => (
    <div className={`fixed inset-0 z-[100] bg-black/90 backdrop-blur-2xl transition-all duration-500 ${
      isSearchOpen ? 'opacity-100 visible' : 'opacity-0 invisible'
    }`}>
      <div className="flex items-center justify-center min-h-screen p-4">
        <div className="relative w-full max-w-2xl">
          {/* Holographic border */}
          <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/20 via-transparent to-purple-500/20 blur-xl" />
          <div className="relative bg-black/80 backdrop-blur-xl border border-cyan-500/30"
               style={{ clipPath: 'polygon(20px 0, 100% 0, calc(100% - 20px) 100%, 0 100%)' }}>
            
            <div className="p-8">
              <div className="flex items-center gap-4 mb-8">
                <Search className="text-cyan-400" size={24} />
                <GlitchText isActive={true}>
                  <span className="text-2xl font-bold">NEURAL SEARCH</span>
                </GlitchText>
                <button 
                  onClick={() => setIsSearchOpen(false)}
                  className="ml-auto text-gray-400 hover:text-white transition-colors"
                >
                  <X size={24} />
                </button>
              </div>
              
              <div className="space-y-3">
                {navItems.map((item, index) => {
                  const Icon = item.icon;
                  return (
                    <button
                      key={item.label}
                      onClick={() => scrollToSection(item.href)}
                      className="w-full group"
                      style={{ animationDelay: `${index * 100}ms` }}
                    >
                      <div className="relative p-4 bg-gray-900/50 border border-gray-700 hover:border-cyan-500/50 transition-all duration-300"
                           style={{ clipPath: 'polygon(10px 0, 100% 0, calc(100% - 10px) 100%, 0 100%)' }}>
                        <div className="flex items-center gap-4">
                          <div className="p-2 bg-black/50 border border-gray-600"
                               style={{ clipPath: 'polygon(4px 0, 100% 0, calc(100% - 4px) 100%, 0 100%)' }}>
                            <Icon size={18} style={{ color: item.accent }} />
                          </div>
                          <div className="flex-1 text-left">
                            <div className="text-white font-medium">{item.label}</div>
                            <div className="text-gray-400 text-sm">Navigate to {item.label.toLowerCase()}</div>
                          </div>
                          <ArrowRight className="text-gray-400 group-hover:text-cyan-400 transition-colors" size={16} />
                        </div>
                        <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity" />
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <>
      <SearchModal />
      
      {/* Cursor Trail */}
      <div
        className="fixed w-8 h-8 pointer-events-none z-50 mix-blend-difference"
        style={{
          left: mousePosition.x - 16,
          top: mousePosition.y - 16,
          background: 'radial-gradient(circle, cyan 2px, transparent 2px)',
          transition: 'all 0.1s ease-out',
        }}
      />

      <nav 
        ref={navRef}
        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-700 ${
          scrolled 
            ? 'bg-black/90 backdrop-blur-2xl border-b border-cyan-500/30' 
            : 'bg-transparent'
        }`}
      >
        <FloatingElements />
        
        {/* Cyber Grid Background */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0" 
               style={{
                 backgroundImage: `
                   linear-gradient(cyan 1px, transparent 1px),
                   linear-gradient(90deg, cyan 1px, transparent 1px)
                 `,
                 backgroundSize: '20px 20px'
               }} />
        </div>

        <div className="relative max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            
            {/* Futuristic Logo */}
            <button
              onClick={() => scrollToSection('#home')}
              className="relative group flex items-center gap-4"
            >
              {/* Logo Container */}
              <div className="relative">
                <div className="w-12 h-12 bg-black border-2 border-cyan-500 flex items-center justify-center relative overflow-hidden"
                     style={{ clipPath: 'polygon(0 0, calc(100% - 8px) 0, 100% 8px, 100% 100%, 8px 100%, 0 calc(100% - 8px))' }}>
                  
                  {/* Inner glow */}
                  <div className="absolute inset-1 bg-gradient-to-br from-cyan-400/20 to-blue-600/20 animate-pulse" />
                  
                  {/* Letter */}
                  <span className="relative z-10 text-cyan-400 font-bold text-xl font-mono">N</span>
                  
                  {/* Scanning line */}
                  <div className="absolute top-0 left-0 w-full h-0.5 bg-cyan-400 animate-pulse" 
                       style={{ animation: 'scan 2s ease-in-out infinite' }} />
                </div>
                
                {/* Corner accents */}
                <div className="absolute -top-1 -left-1 w-2 h-2 border-l-2 border-t-2 border-cyan-400" />
                <div className="absolute -top-1 -right-1 w-2 h-2 border-r-2 border-t-2 border-cyan-400" />
                <div className="absolute -bottom-1 -left-1 w-2 h-2 border-l-2 border-b-2 border-cyan-400" />
                <div className="absolute -bottom-1 -right-1 w-2 h-2 border-r-2 border-b-2 border-cyan-400" />
              </div>
              
              {/* Text */}
              <div className="hidden sm:block">
                <GlitchText isActive={false}>
                  <span className="text-2xl font-bold font-mono text-white">NITHIN_KR</span>
                </GlitchText>
                <div className="flex items-center gap-2 text-xs text-cyan-400 font-mono">
                  <Terminal size={10} />
                  <span>FULL_STACK_DEV</span>
                  <div className="w-1 h-1 bg-cyan-400 animate-pulse" />
                </div>
              </div>
            </button>

            {/* Desktop Navigation */}
            <div className="hidden lg:flex items-center gap-8">
              
              {/* System Status */}
              <div className="flex items-center gap-4 text-xs font-mono">
                <div className="flex items-center gap-2 px-3 py-1 bg-black/50 border border-gray-700"
                     style={{ clipPath: 'polygon(6px 0, 100% 0, calc(100% - 6px) 100%, 0 100%)' }}>
                  <div className="w-2 h-2 bg-green-400 animate-pulse" />
                  <span className="text-green-400">ONLINE</span>
                </div>
                
                <div className="flex items-center gap-2 px-3 py-1 bg-black/50 border border-gray-700"
                     style={{ clipPath: 'polygon(6px 0, 100% 0, calc(100% - 6px) 100%, 0 100%)' }}>
                  <span className="text-cyan-400">{currentTime.toLocaleTimeString()}</span>
                </div>
                
                <div className="flex items-center gap-2 px-3 py-1 bg-black/50 border border-gray-700"
                     style={{ clipPath: 'polygon(6px 0, 100% 0, calc(100% - 6px) 100%, 0 100%)' }}>
                  <div className="w-8 h-2 bg-gray-700 relative">
                    <div 
                      className="absolute top-0 left-0 h-full bg-gradient-to-r from-green-400 to-yellow-400" 
                      style={{ width: `${batteryLevel}%` }}
                    />
                  </div>
                  <span className="text-yellow-400">{batteryLevel}%</span>
                </div>
              </div>

              {/* Navigation Items */}
              <div className="flex items-center">
                {navItems.map((item, index) => {
                  const Icon = item.icon;
                  const isActive = activeSection === item.href.slice(1);
                  
                  return (
                    <div key={item.label} className="relative">
                      <button
                        onClick={() => scrollToSection(item.href)}
                        className={`relative flex flex-col items-center gap-1 px-4 py-3 transition-all duration-300 group ${
                          isActive ? 'text-cyan-400' : 'text-gray-400 hover:text-white'
                        }`}
                      >
                        <HologramEffect isActive={isActive}>
                          <div className={`p-2 border transition-all duration-300 ${
                            isActive 
                              ? 'border-cyan-400 bg-cyan-400/10' 
                              : 'border-gray-700 group-hover:border-gray-500'
                          }`}
                               style={{ clipPath: 'polygon(4px 0, 100% 0, calc(100% - 4px) 100%, 0 100%)' }}>
                            <Icon size={16} style={{ color: isActive ? '#00f5ff' : undefined }} />
                          </div>
                        </HologramEffect>
                        
                        <span className="text-xs font-mono font-medium">{item.label.toUpperCase()}</span>
                        
                        {/* Active indicator */}
                        {isActive && (
                          <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2">
                            <div className="w-1 h-1 bg-cyan-400 animate-pulse" />
                          </div>
                        )}
                      </button>
                      
                      {/* Connection line to next item */}
                      {index < navItems.length - 1 && (
                        <div className="absolute top-1/2 -right-2 w-4 h-px bg-gradient-to-r from-gray-700 to-transparent" />
                      )}
                    </div>
                  );
                })}
              </div>
              
              {/* Action Buttons */}
              <div className="flex items-center gap-3">
                <button
                  onClick={() => setIsSearchOpen(true)}
                  className="p-2 text-gray-400 hover:text-cyan-400 transition-colors border border-gray-700 hover:border-cyan-500"
                  style={{ clipPath: 'polygon(4px 0, 100% 0, calc(100% - 4px) 100%, 0 100%)' }}
                >
                  <Search size={16} />
                </button>
                
                <NeonButton onClick={() => window.open('/resume.pdf', '_blank')} variant="primary">
                  <Download size={16} />
                  <span className="font-mono">RESUME</span>
                </NeonButton>
              </div>
            </div>

            {/* Mobile Menu Button */}
            <button
              className="lg:hidden relative p-3 text-white group"
              onClick={() => setIsOpen(!isOpen)}
            >
              <div className="relative w-6 h-6">
                <div className={`absolute w-full h-0.5 bg-cyan-400 transition-all duration-300 ${
                  isOpen ? 'rotate-45 top-3' : 'top-1'
                }`} />
                <div className={`absolute w-full h-0.5 bg-cyan-400 transition-all duration-300 ${
                  isOpen ? 'opacity-0' : 'top-3'
                }`} />
                <div className={`absolute w-full h-0.5 bg-cyan-400 transition-all duration-300 ${
                  isOpen ? '-rotate-45 top-3' : 'top-5'
                }`} />
              </div>
            </button>
          </div>
        </div>
        
        {/* Quantum Progress Bar */}
        <div className="absolute bottom-0 left-0 right-0 h-1 bg-gray-900">
          <div 
            className="h-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 relative"
            style={{ width: `${scrollProgress}%` }}
          >
            <div className="absolute top-0 right-0 w-2 h-full bg-white animate-pulse" />
          </div>
          <div className="absolute top-0 left-0 w-full h-px bg-cyan-400/30" />
        </div>
      </nav>

      {/* Cyberpunk Mobile Menu */}
      <div className={`fixed inset-0 z-40 lg:hidden transition-all duration-500 ${
        isOpen ? 'visible opacity-100' : 'invisible opacity-0'
      }`}>
        <div className="absolute inset-0 bg-black/95 backdrop-blur-2xl" onClick={() => setIsOpen(false)}>
          <div className="absolute inset-0 opacity-10"
               style={{
                 backgroundImage: `
                   linear-gradient(cyan 1px, transparent 1px),
                   linear-gradient(90deg, cyan 1px, transparent 1px)
                 `,
                 backgroundSize: '30px 30px'
               }} />
        </div>
        
        <div className={`absolute top-0 right-0 w-full max-w-sm h-full bg-black/95 backdrop-blur-2xl border-l-2 border-cyan-500/30 transform transition-transform duration-500 ${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        }`}>
          <div className="p-6 pt-24">
            
            {/* Mobile Header */}
            <div className="text-center mb-8">
              <GlitchText isActive={true}>
                <h3 className="text-2xl font-bold font-mono">NAVIGATION</h3>
              </GlitchText>
              <div className="w-16 h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent mx-auto mt-4" />
            </div>
            
            {/* Mobile Navigation */}
            <div className="space-y-3">
              {navItems.map((item, index) => {
                const Icon = item.icon;
                const isActive = activeSection === item.href.slice(1);
                
                return (
                  <button
                    key={item.label}
                    onClick={() => scrollToSection(item.href)}
                    className={`w-full group transition-all duration-300`}
                    style={{ animationDelay: `${index * 100}ms` }}
                  >
                    <div className={`relative p-4 border transition-all duration-300 ${
                      isActive
                        ? 'border-cyan-400 bg-cyan-400/10'
                        : 'border-gray-700 hover:border-gray-500'
                    }`}
                         style={{ clipPath: 'polygon(12px 0, 100% 0, calc(100% - 12px) 100%, 0 100%)' }}>
                      
                      <div className="flex items-center gap-4">
                        <div className={`p-2 border ${isActive ? 'border-cyan-400' : 'border-gray-600'}`}
                             style={{ clipPath: 'polygon(4px 0, 100% 0, calc(100% - 4px) 100%, 0 100%)' }}>
                          <Icon size={20} style={{ color: isActive ? item.accent : '#9ca3af' }} />
                        </div>
                        
                        <div className="flex-1 text-left">
                          <div className={`font-mono font-medium ${isActive ? 'text-cyan-400' : 'text-white'}`}>
                            {item.label.toUpperCase()}
                          </div>
                          <div className="text-gray-400 text-xs">Navigate to {item.label}</div>
                        </div>
                        
                        {isActive && (
                          <div className="w-2 h-2 bg-cyan-400 animate-pulse" />
                        )}
                      </div>
                      
                      {isActive && (
                        <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/5 to-blue-500/5" />
                      )}
                    </div>
                  </button>
                );
              })}
            </div>
            
            {/* Mobile Resume Button */}
            <div className="mt-8">
              <NeonButton onClick={() => window.open('/resume.pdf', '_blank')} variant="primary">
                <Download size={18} />
                <span className="font-mono">DOWNLOAD_RESUME</span>
              </NeonButton>
            </div>
            
            {/* Mobile Footer */}
            <div className="mt-8 pt-6 border-t border-gray-800 text-center">
              <div className="text-gray-400 text-xs font-mono">
                SCROLL: {Math.round(scrollProgress)}% | SYSTEM: ONLINE
              </div>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes scan {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        
        @keyframes float {
          0%, 100% { transform: translateY(0) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @keyframes glitch {
          0%, 100% { transform: translate(0); }
          20% { transform: translate(-2px, 2px); }
          40% { transform: translate(-2px, -2px); }
          60% { transform: translate(2px, 2px); }
          80% { transform: translate(2px, -2px); }
        }
      `}</style>
    </>
  );
}